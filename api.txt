# ComfyUI API Usage Guide

## ComfyUI Server Management

### System Status
```bash
curl http://localhost:8188/system_stats
```
Returns system information including RAM, VRAM, ComfyUI version, and device details.

### Restart ComfyUI (via ComfyUI-Manager)
```bash
curl -X GET http://localhost:8188/manager/reboot
```
**Requirements**: 
- ComfyUI-Manager extension installed
- Security level 'middle' or below
- Triggers process restart (exit 0)

### Queue Management
```bash
# Submit workflow
curl -X POST http://localhost:8188/prompt \
  -H "Content-Type: application/json" \
  -d '{"prompt": WORKFLOW_JSON, "client_id": "your_client_id"}'

# Check queue status
curl http://localhost:8188/queue

# Get execution history
curl http://localhost:8188/history

# Get specific prompt history
curl http://localhost:8188/history/PROMPT_ID
```

### Logs Access
```bash
# Get raw logs (JSON format)
curl http://localhost:8188/internal/logs/raw

# Get formatted logs
curl http://localhost:8188/internal/logs/raw | jq '.entries[] | .m' -r
```

## WIDEN Merge API Workflow

### Basic WIDEN UNet Merge
```json
{
  "1": {
    "inputs": {"ckpt_name": "model1.safetensors"},
    "class_type": "CheckpointLoaderSimple"
  },
  "2": {
    "inputs": {"ckpt_name": "model2.safetensors"},
    "class_type": "CheckpointLoaderSimple"
  },
  "3": {
    "inputs": {
      "model_base": ["1", 0],
      "model_other": ["2", 0],
      "merge_strength": 0.5,
      "normalization_mode": "magnitude",
      "importance_threshold": 1.0,
      "importance_boost": 2.5,
      "rank_sensitivity": 2.0,
      "skip_threshold": 0.0
    },
    "class_type": "DonutWidenMergeUNet"
  }
}
```

### WIDEN CLIP Merge
```json
{
  "4": {
    "inputs": {
      "clip_base": ["1", 1],
      "clip_other": ["2", 1],
      "merge_strength": 0.5,
      "normalization_mode": "magnitude",
      "importance_threshold": 1.0,
      "importance_boost": 2.5,
      "rank_sensitivity": 2.0,
      "skip_threshold": 0.0
    },
    "class_type": "DonutWidenMergeCLIP"
  }
}
```

### Complete Generation Workflow
```json
{
  "1": {"inputs": {"ckpt_name": "DDMv4_1.safetensors"}, "class_type": "CheckpointLoaderSimple"},
  "2": {"inputs": {"ckpt_name": "MagneticXL2.safetensors"}, "class_type": "CheckpointLoaderSimple"},
  "3": {
    "inputs": {
      "model_base": ["1", 0], "model_other": ["2", 0],
      "merge_strength": 0.5, "normalization_mode": "magnitude",
      "importance_threshold": 1.0, "importance_boost": 2.5,
      "rank_sensitivity": 2.0, "skip_threshold": 0.0
    },
    "class_type": "DonutWidenMergeUNet"
  },
  "4": {
    "inputs": {
      "clip_base": ["1", 1], "clip_other": ["2", 1],
      "merge_strength": 0.5, "normalization_mode": "magnitude",
      "importance_threshold": 1.0, "importance_boost": 2.5,
      "rank_sensitivity": 2.0, "skip_threshold": 0.0
    },
    "class_type": "DonutWidenMergeCLIP"
  },
  "5": {
    "inputs": {"text": "masterpiece, best quality, 1girl", "clip": ["4", 0]},
    "class_type": "CLIPTextEncode"
  },
  "6": {
    "inputs": {"text": "worst quality, low quality", "clip": ["4", 0]},
    "class_type": "CLIPTextEncode"
  },
  "7": {
    "inputs": {"width": 1024, "height": 1024, "batch_size": 1},
    "class_type": "EmptyLatentImage"
  },
  "8": {
    "inputs": {
      "seed": 12345, "steps": 20, "cfg": 7.0,
      "sampler_name": "dpmpp_2m", "scheduler": "karras", "denoise": 1.0,
      "model": ["3", 0], "positive": ["5", 0], "negative": ["6", 0],
      "latent_image": ["7", 0]
    },
    "class_type": "KSampler"
  },
  "9": {
    "inputs": {"samples": ["8", 0], "vae": ["1", 2]},
    "class_type": "VAEDecode"
  },
  "10": {
    "inputs": {"filename_prefix": "widen_merge", "images": ["9", 0]},
    "class_type": "SaveImage"
  }
}
```

## WIDEN Parameters

### Core Parameters
- **merge_strength** (0.0-1.0): Base merge intensity
- **normalization_mode**: "magnitude" or "direction" 
- **importance_threshold** (0.0+): Minimum significance for parameter merging
- **importance_boost** (1.0+): Amplification factor for important parameters
- **rank_sensitivity** (0.0+): Cross-parameter ranking sensitivity
- **skip_threshold** (0.0-1.0): Compatibility threshold for skipping parameters

### Optimal Settings by Use Case
```
# Conservative merge (preserve base model)
merge_strength: 0.3, importance_threshold: 1.5, importance_boost: 2.0

# Balanced merge (equal contribution)
merge_strength: 0.5, importance_threshold: 1.0, importance_boost: 2.5

# Aggressive merge (favor other model)
merge_strength: 0.7, importance_threshold: 0.8, importance_boost: 3.0
```

## Memory Monitoring

### Memory Status During Merge
The WIDEN merge provides detailed memory tracking:
```
[ENHANCED WIDEN] Creating TaskVectors...
[ENHANCED WIDEN] Computing differences...
[ENHANCED WIDEN] Cleanup complete - Final RAM: X.XGB
```

### Memory Optimization Features
- Block-wise processing (24 SDXL blocks)
- Comprehensive cleanup of intermediate data
- TaskVector parameter clearing
- Aggressive garbage collection
- CUDA memory cache management

## Error Handling

### Common Issues
1. **Node not found**: Ensure ComfyUI-DonutNodes is loaded
2. **Out of memory**: Reduce batch size or use CPU processing
3. **Invalid prompt**: Check JSON syntax and node connections
4. **Model loading errors**: Verify model paths and formats

### Debugging
```bash
# Check ComfyUI logs for detailed error information
curl http://localhost:8188/internal/logs/raw | tail -50

# Monitor memory usage during merge
watch -n 1 'curl -s http://localhost:8188/system_stats | jq .system.ram_free'
```

## Performance Tips

### Memory Efficiency
- Use smaller models for testing
- Monitor system RAM (recommended 32GB+ for SDXL)
- Close other applications during large merges

### Speed Optimization
- Use CUDA when available
- Ensure sufficient VRAM (12GB+ for SDXL)
- Use SSD storage for model files

## Integration Examples

### Python Integration
```python
import requests
import json

def submit_widen_merge(model1, model2, strength=0.5):
    workflow = {
        # ... workflow JSON ...
    }
    
    response = requests.post(
        "http://localhost:8188/prompt",
        json={"prompt": workflow, "client_id": "python_client"}
    )
    
    return response.json()["prompt_id"]

def wait_for_completion(prompt_id):
    while True:
        response = requests.get(f"http://localhost:8188/history/{prompt_id}")
        history = response.json()
        
        if prompt_id in history:
            status = history[prompt_id].get("status", {})
            if status.get("completed", False):
                return True
            elif "error" in status:
                return False
        
        time.sleep(2)
```

### Bash Automation
```bash
#!/bin/bash
# Submit WIDEN merge and wait for completion

WORKFLOW='{"1": {...}, "2": {...}, ...}'
CLIENT_ID="bash_client_$(date +%s)"

# Submit workflow
PROMPT_ID=$(curl -s -X POST http://localhost:8188/prompt \
  -H "Content-Type: application/json" \
  -d "{\"prompt\": $WORKFLOW, \"client_id\": \"$CLIENT_ID\"}" \
  | jq -r .prompt_id)

echo "Submitted workflow: $PROMPT_ID"

# Wait for completion
while true; do
  STATUS=$(curl -s http://localhost:8188/history/$PROMPT_ID \
    | jq -r ".[\"$PROMPT_ID\"].status.completed // false")
  
  if [ "$STATUS" = "true" ]; then
    echo "Workflow completed successfully"
    break
  fi
  
  sleep 5
done
```

## Advanced Features

### Memory Profiling
```bash
# Monitor merge progress with memory tracking
curl -s http://localhost:8188/internal/logs/raw | \
  jq '.entries[] | select(.m | contains("[MEMORY")) | .m' -r
```

### Cache Management
The WIDEN merge includes intelligent caching:
- Automatic cache invalidation on parameter changes
- Memory-efficient cache storage
- Cache size monitoring

### Compatibility Checking
Built-in compatibility validation:
- Cross-parameter relationship analysis
- Magnitude/direction variance detection
- Automatic fallback for incompatible parameters